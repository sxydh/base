package cn.net.bhe.introductiontoalgorithms.foundations.divideandconquer;

/**
 * 分治策略是对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分
 * 解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问
 * 题的解合并得到原问题的解。
 * 
 * 在分治策略中，我们递归地求解一个问题，在每层递归中应用如下的三个步骤：
 * ▪ 分解(Divide)步骤将问题划分为一些子问题，子问题的形式与原问题一样，只是规模更小。
 * ▪ 解决(Conquer)步骤递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解。
 * ▪ 合并(Combine)步骤将子问题的解组合成原问题的解。
 * 
 * 当子问题足够大，需要递归求解时，我们称之为递归情况（recursive case）。当子问题变得足够小，不再需
 * 要递归时，我们说递归已经“触底”，进入了基本情况（base case）。除了与原问题形式完全一样的规模更小
 * 的子问题外，还需要求解与原问题不完全一样的子问题。我们将这些子问题的求解看做合并步骤的一部分。
 */
public class App {

}

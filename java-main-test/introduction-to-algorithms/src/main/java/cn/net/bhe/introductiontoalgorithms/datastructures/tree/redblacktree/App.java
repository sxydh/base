package cn.net.bhe.introductiontoalgorithms.datastructures.tree.redblacktree;

/**
 * 红黑树是一颗二叉搜索树，它在每个结点上增加了一个存储位来表示结点的颜色，
 * 可以是RED或BLACK。通过对任何一条从根到叶子的简单路径上各个结点的颜色进行约束，
 * 红黑树确保没有一条路径会比其他路径长出2倍，因而是近似于平衡的。
 * 
 * 树中每个结点包含5个属性：color、key、left、right和p。如果一个结点没有子节点或父节点，
 * 则该节点相应指针属性的值为NIL。我们可以把这些NIL视为指向二叉搜索树的叶节点（外部节点）的指针，
 * 而把带关键字的结点视为树的内部节点。
 *
 * 一棵红黑树是满足下面红黑性质的二叉搜索树：
 * 1、每个结点或是红色的，或是黑色的。
 * 2、根结点是黑色的。
 * 3、每个叶节点(NIL)是黑色的。
 * 4、如果一个结点是红色的，则它的两个子节点都是黑色的。
 * 5、对每个结点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色结点。(这一条保证了红黑树没有一条路径会比其他路径长出2倍：因为最短路径是全是黑色结点的路径，最长路径是红黑相隔的路径，由性质4和5即可得出结论)
 * 
 * 一棵有n个内部结点的红黑树的高度至多为2lg(n+1)，动态集合操作SEARCH、MINIMUM、MAXIMUM、SUCCESSOR和PREDECESSOR可在红黑树上在O(lg(n))时间内执行。
 *
 */
public class App {

}
